{
  
    
        "post0": {
            "title": "Dog Breed Classification:",
            "content": "Intro: . We have used famous standford dataset. The Stanford Dogs dataset contains images of 120 breeds of dogs from around the world. This dataset has been built using images and annotation from ImageNet for the task of fine-grained image categorization. . I have downloaded it manually and uploaded to my google drive. Later made a webapp. . Fastai2: It&#39;s very famous A.I library built on the top of pytorch. Courses taught by himself Jeremey Howard here. Do go through it, it might look a bit long but it&#39;s worth it! . Before proceeding further, if you are a beginner, you should know that google colab comes with preinstalled libraries. So, we rarely have to install something on our own. But for this task, we will be using fastai2. And Installing it because its not pre-installed. . Gathering data and using: . Here, we are connecting our google colab notebook to google drive. So that, the data i have downloaded can be loaded and used for training. When you will download data the folder names i.e classes would be filled with numbers and special characters. But we want simple class name like, Pembroke not n02113023-Pembroke . So, a bit cleaning was necessary. In fastai, Jeremy Howard talks about using regular expression technique which is indeed quite handy. . But i haven&#39;t used it, i used simple custom function to change the names. Which worked pretty well! . You can find that blog here in this link. It&#39;s small and quick. . from google.colab import drive drive.mount(&quot;/content/gdrive&quot;) . Mounted at /content/gdrive . . Note: that at the time of running this notebook. Fastai2 was supported by fastcore 0.1.35 somehow. . !pip install fastai2 !pip install fastcore==0.1.35 . . Important: In standard software engineering practices, it is not recommended to use from {some package} import *. It is said to pollute namespace and make code less readable and sometimes prone to breakage. . from fastai2.vision.all import * . Then why are we using it? . According to the creator, Jeremy Howard, it&#39;s recommended way in fastai2. Fastai2 is designed in a way to make from fastai2.vision.all import * efficient and easy to use. It doesn&#39;t causes namespace pollution and keeps code clean. To learn about it more you can refer to fastai official docs. . Now, loading data from our dataset directory. Fastai provides pretty easy way to deal with it. . dls = ImageDataLoaders.from_folder(path,train=&#39;train&#39;, valid=&#39;val&#39;, item_tfms=Resize(460), batch_tfms=aug_transforms(size=224,flip_vert=True), device=&#39;cuda&#39;) . In fastai, if you are getting started. It might look a bit overwhelming to get familiar with words. Just like me, perhaps. But bear with it. It&#39;s worth it. . Now what is ImageDataLoaders.from_folder? Fastai has various dataloaders to take use data and convert them into batches and other type of augmentation. Look into this. These functions basically load your data and convert them in batches. Either, loading from folder, df, path func.. etc. We are using ImageDataLoaders.from_folder because we have image data saved in it. . Parameters of this functions like, path, train, val, item_tfms, batch_tfms. In first, we define path to the directory. Within the directory i have image folder named train and val. Giving these folders name to function so that it can go on finding the data. . item_tfms happens first, followed by batch_tfms. This enables most of the calculations for the transforms to happen on the GPU, thus saving time. The first step item_tfms resizes all the images to the same size (this happens on the CPU) and then batch_tfms happens on the GPU for the entire batch of images. If it weren’t to happen in two steps, then all these calculations would have to be done on the CPU, which is slower. . . As you can see, item_tfms uses CPU for resizing images to same size. So that, our model generalizes well. And then we use batch_tfms to push everything to GPU. . Now after data preprocessing. Shall we look into our data? How it looks. It&#39;s important to be familiar with data and get comfortable with it. . dls.show_batch() . . Modelling in Fastai2 . We use cnn_learner to built our model in single line. Although so many is happening under the hood. Remember that we aare passing several things like, dls which is our dataloader we created a while ago. resnet50 is our pretrained state of the art model. Incase, you are absolute beginner. We use technique called transfer learning. . What it does? It take pretrained. State of the art model. And fine tune it. It means, existing pretrained model and change several parameters according to our needs and MAGIC we get our own state of the art model. . This is what cnn_learner does. We give it data, and tells which model to use. We could also use resnet18,34,101. But in this case, resnet 50 worked pretty well. And we also pass metric to be used, remember metric is important parameter as it tells us our model is not overfitting. We used both error_rate and accuracy. In many cases, error_rate is your best friend. . learn = cnn_learner(dls, resnet50, metrics=[accuracy,error_rate]) . Before going to the training we should find learning rate at which model will be learning the data. . Warning: Don&#8217;t fall in trap of choosing high learning rate so that our model learns fastest. . Why? Because faster learning means model missing out the underlying relation in the data. Rather struggles and won&#39;t give you satisfactory result. Neither, we should choose low learning rate coz it might take eternity to reach to solution. We want abstemious learning rate so that it fits well. . . So, how to choose learning rate? Fastai to the rescue! . Below, an image will help you. Choosing learning rate. . learn.lr_find() . SuggestedLRs(lr_min=0.004786301031708717, lr_steep=0.009120108559727669) . Oops, It is some curvy graph. And we are provided with 2 suggested LR(Learning Rate) . How to choose best learning rate? You might hypothesis that learning rate which gives lowest would be ideal. . Not quite. We want to select learning rate point at which it is dropping fastest per step. This happening around near between 10^-3 and 10^-2. We can choose, 1e-3. Which in normal notations is 0.0010. . Model Training And Result . Well, now the time to have fun! Let&#39;s see how our model performs. I hope not too bad. We use fine_tune function to set number of epochs and learning rate. Let&#39;s set number of epochs to 4. . learn.fine_tune(4, 1e-3) . epoch train_loss valid_loss accuracy error_rate time . 0 | 1.477997 | 0.959091 | 0.719900 | 0.280100 | 02:48 | . epoch train_loss valid_loss accuracy error_rate time . 0 | 1.112022 | 0.758686 | 0.771144 | 0.228856 | 02:54 | . 1 | 0.913335 | 0.653243 | 0.800995 | 0.199005 | 02:55 | . 2 | 0.741961 | 0.605838 | 0.815920 | 0.184080 | 02:55 | . 3 | 0.636256 | 0.594278 | 0.828856 | 0.171144 | 02:57 | . Ummm, 82% accuracy. Not exceptional not bad either. Actually, it works very fine. You can do better! Try yourself and see if you can do better than this. . Let&#39;s see results below . learn.show_results() . . So our model is detecting pretty nicely?!!! Just one error. With so minimal effort we trained state of the art model and it is working pretty well. If you can train nicely, it will be flawless! . But, let&#39;s just look at where we are wrong. Where our model is making mistakes? . interp = Interpretation.from_learner(learn) interp.plot_top_losses(9, figsize=(15,10)) . . We can also plot confusion matrix. It helps us to see if the predictions are right or not. Below image shows some white diagonal. It means most of the images were classified correctly. If you want to learn more about confusion matrix read here. . k= ClassificationInterpretation.from_learner(learn) k.plot_confusion_matrix() . Let&#39;s just predict on any random image. I had test dataset which i didn&#39;t use in my training. So, using any one image. I chose, Beagle image. Let&#39;s see if our model can predict correctly. . . Tip: You can use softmax function to show the probability of prediction. . breed=learn.predict(img) . . &#34;Dog&#39;s Breed is Beagle&#34; . Exporting Model and Loading it . One of the questions could be how to export model? We use fairly easy way in exporting and loading models in fastai2. . learn.export(&#39;final.pth&#39;) #exporting . learn= load_learner(&#39;final.pth&#39;) #loading . Again using prediction to see if our model is still able to recognize Beagle image we used a while ago . &#34;Dog&#39;s Breed is Beagle&#34; . So, its working pretty nicely! . If it helped you or you have any queries feel free to ask! .",
            "url": "https://hiteshhedwig.github.io/hedwig-explains/python/deeplearning/classification/fastai/2020/10/06/dog-breed-fastai.html",
            "relUrl": "/python/deeplearning/classification/fastai/2020/10/06/dog-breed-fastai.html",
            "date": " • Oct 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Changing Folder Name for model training",
            "content": "What are we doing in this blog? . We are changing folders name like this: . Folder Name from n02113023-Pembroke Changed to Pembroke . Folder Name from n02113624-toy_poodle Changed to Toy Poodle . Folder Name from n02115641-dingo Changed to Dingo . If want to learn this, Go on with reading: . In this, dataset directory. I have downloaded, famous standford dataset. The Stanford Dogs dataset contains images of 120 breeds of dogs from around the world. This dataset has been built using images and annotation from ImageNet for the task of fine-grained image categorization. . The name of the folders (which will be used as classes while training) have names like, n02093256-Staffordshire_bullterrier. We definitely don&#39;t want our class to be like that but rather simple Staffordshire Bullterrier. The python script will get rid of any weird characters that are unneccessary. . Now, we have our path defined where the data is situated. In my case, i had uploaded it to google drive. Time consuming upload, avoid it if possible. . path= &#39;/content/gdrive/My Drive/Dog species/Images&#39; . . Let&#39;s say we have folder name like this: . n02093256-Staffordshire_bullterrier . Here is our process of obtaining what we want, . We first split on the basis of - (hyphen) charachter | Then we obtain list like this: [&#39;n02093256&#39; , &#39;Staffordshire_bullterrier&#39;] | After that, we use slicing technique to select second index. | Then after we have what we wanted, we can simply again split on the basis of _ (underscore) | Then we obtain something like this: [&#39;Staffordshire&#39;,&#39;bullterrier&#39;] | After we have what we wanted we can simply join the list back. And use capitalize to make first letter of word capitalize. | . . Note: This code will need to be modified according to the folder name you are dealing with. . &#39;&#39;&#39; THIS PYTHON CODE CHANGES NAME OF FILES IN A FOLDER &#39;&#39;&#39; import os import string def change_name(folder_name): folder_name=folder_name.split(&#39;-&#39;) #n02113023-Pembroke-&gt;[&#39;n02113023&#39;,&#39;Pembroke&#39;] folder_name= &#39; &#39;.join(folder_name[1:]) #Selecting index after 1 and joining them folder_name=folder_name.split(&#39;_&#39;) # Again splitting becayse name seem to be like Staffordshire_bullterrier folder_name= &#39; &#39;.join(folder_name) #again joining after getting rid of _ return string.capwords(folder_name) #or we can use capitalize() #iterating over all the folders and changing file name for fn in os.listdir(path): new_path= os.path.join(path,fn) #folder_name= os.path.basename(new_path) #alternative use of to know file name new_folder_name= change_name(fn) os.rename(os.path.join(path,fn),os.path.join(path,new_folder_name)) print (f&#39;Folder Name from {fn} Changed to {new_folder_name}&#39;) . Folder Name from n02113023-Pembroke Changed to Pembroke Folder Name from n02093256-Staffordshire_bullterrier Changed to Staffordshire Bullterrier Folder Name from n02093428-American_Staffordshire_terrier Changed to American Staffordshire Terrier Folder Name from n02113624-toy_poodle Changed to Toy Poodle Folder Name from n02100236-German_short-haired_pointer Changed to German Short Haired Pointer Folder Name from n02115641-dingo Changed to Dingo Folder Name from n02089867-Walker_hound Changed to Walker Hound Folder Name from n02099601-golden_retriever Changed to Golden Retriever Folder Name from n02105162-malinois Changed to Malinois Folder Name from n02100735-English_setter Changed to English Setter Folder Name from n02097298-Scotch_terrier Changed to Scotch Terrier Folder Name from n02095889-Sealyham_terrier Changed to Sealyham Terrier Folder Name from n02106550-Rottweiler Changed to Rottweiler Folder Name from n02088094-Afghan_hound Changed to Afghan Hound Folder Name from n02112018-Pomeranian Changed to Pomeranian Folder Name from n02099429-curly-coated_retriever Changed to Curly Coated Retriever Folder Name from n02095314-wire-haired_fox_terrier Changed to Wire Haired Fox Terrier Folder Name from n02116738-African_hunting_dog Changed to African Hunting Dog Folder Name from n02091467-Norwegian_elkhound Changed to Norwegian Elkhound Folder Name from n02096294-Australian_terrier Changed to Australian Terrier Folder Name from n02108422-bull_mastiff Changed to Bull Mastiff Folder Name from n02096177-cairn Changed to Cairn Folder Name from n02104365-schipperke Changed to Schipperke Folder Name from n02101556-clumber Changed to Clumber Folder Name from n02090721-Irish_wolfhound Changed to Irish Wolfhound Folder Name from n02110806-basenji Changed to Basenji Folder Name from n02105251-briard Changed to Briard Folder Name from n02102040-English_springer Changed to English Springer Folder Name from n02085620-Chihuahua Changed to Chihuahua Folder Name from n02110063-malamute Changed to Malamute Folder Name from n02109525-Saint_Bernard Changed to Saint Bernard Folder Name from n02107683-Bernese_mountain_dog Changed to Bernese Mountain Dog Folder Name from n02111129-Leonberg Changed to Leonberg Folder Name from n02094114-Norfolk_terrier Changed to Norfolk Terrier Folder Name from n02110627-affenpinscher Changed to Affenpinscher Folder Name from n02111277-Newfoundland Changed to Newfoundland Folder Name from n02112350-keeshond Changed to Keeshond Folder Name from n02106382-Bouvier_des_Flandres Changed to Bouvier Des Flandres Folder Name from n02093647-Bedlington_terrier Changed to Bedlington Terrier Folder Name from n02107312-miniature_pinscher Changed to Miniature Pinscher Folder Name from n02115913-dhole Changed to Dhole Folder Name from n02111889-Samoyed Changed to Samoyed Folder Name from n02091032-Italian_greyhound Changed to Italian Greyhound Folder Name from n02085782-Japanese_spaniel Changed to Japanese Spaniel Folder Name from n02098286-West_Highland_white_terrier Changed to West Highland White Terrier Folder Name from n02090379-redbone Changed to Redbone Folder Name from n02099849-Chesapeake_Bay_retriever Changed to Chesapeake Bay Retriever Folder Name from n02106662-German_shepherd Changed to German Shepherd Folder Name from n02105505-komondor Changed to Komondor Folder Name from n02087046-toy_terrier Changed to Toy Terrier Folder Name from n02098105-soft-coated_wheaten_terrier Changed to Soft Coated Wheaten Terrier Folder Name from n02099267-flat-coated_retriever Changed to Flat Coated Retriever Folder Name from n02104029-kuvasz Changed to Kuvasz Folder Name from n02096585-Boston_bull Changed to Boston Bull Folder Name from n02097130-giant_schnauzer Changed to Giant Schnauzer Folder Name from n02086646-Blenheim_spaniel Changed to Blenheim Spaniel Folder Name from n02112706-Brabancon_griffon Changed to Brabancon Griffon Folder Name from n02111500-Great_Pyrenees Changed to Great Pyrenees Folder Name from n02088466-bloodhound Changed to Bloodhound Folder Name from n02101006-Gordon_setter Changed to Gordon Setter Folder Name from n02108089-boxer Changed to Boxer Folder Name from n02113799-standard_poodle Changed to Standard Poodle Folder Name from n02086910-papillon Changed to Papillon Folder Name from n02113712-miniature_poodle Changed to Miniature Poodle Folder Name from n02095570-Lakeland_terrier Changed to Lakeland Terrier Folder Name from n02098413-Lhasa Changed to Lhasa Folder Name from n02106030-collie Changed to Collie Folder Name from n02092002-Scottish_deerhound Changed to Scottish Deerhound Folder Name from n02110185-Siberian_husky Changed to Siberian Husky Folder Name from n02088238-basset Changed to Basset Folder Name from n02097047-miniature_schnauzer Changed to Miniature Schnauzer Folder Name from n02108551-Tibetan_mastiff Changed to Tibetan Mastiff Folder Name from n02105412-kelpie Changed to Kelpie Folder Name from n02106166-Border_collie Changed to Border Collie Folder Name from n02102480-Sussex_spaniel Changed to Sussex Spaniel Folder Name from n02110958-pug Changed to Pug Folder Name from n02109961-Eskimo_dog Changed to Eskimo Dog Folder Name from n02096437-Dandie_Dinmont Changed to Dandie Dinmont Folder Name from n02091831-Saluki Changed to Saluki Folder Name from n02105056-groenendael Changed to Groenendael Folder Name from n02113186-Cardigan Changed to Cardigan Folder Name from n02102973-Irish_water_spaniel Changed to Irish Water Spaniel Folder Name from n02113978-Mexican_hairless Changed to Mexican Hairless Folder Name from n02092339-Weimaraner Changed to Weimaraner Folder Name from n02105855-Shetland_sheepdog Changed to Shetland Sheepdog Folder Name from n02089973-English_foxhound Changed to English Foxhound Folder Name from n02102318-cocker_spaniel Changed to Cocker Spaniel Folder Name from n02097658-silky_terrier Changed to Silky Terrier Folder Name from n02088632-bluetick Changed to Bluetick Folder Name from n02091635-otterhound Changed to Otterhound Folder Name from n02108000-EntleBucher Changed to Entlebucher Folder Name from n02094258-Norwich_terrier Changed to Norwich Terrier Folder Name from n02112137-chow Changed to Chow Folder Name from n02094433-Yorkshire_terrier Changed to Yorkshire Terrier Folder Name from n02097474-Tibetan_terrier Changed to Tibetan Terrier Folder Name from n02100583-vizsla Changed to Vizsla Folder Name from n02097209-standard_schnauzer Changed to Standard Schnauzer Folder Name from n02096051-Airedale Changed to Airedale Folder Name from n02091134-whippet Changed to Whippet Folder Name from n02107908-Appenzeller Changed to Appenzeller Folder Name from n02105641-Old_English_sheepdog Changed to Old English Sheepdog Folder Name from n02085936-Maltese_dog Changed to Maltese Dog Folder Name from n02087394-Rhodesian_ridgeback Changed to Rhodesian Ridgeback Folder Name from n02108915-French_bulldog Changed to French Bulldog Folder Name from n02100877-Irish_setter Changed to Irish Setter Folder Name from n02109047-Great_Dane Changed to Great Dane Folder Name from n02107574-Greater_Swiss_Mountain_dog Changed to Greater Swiss Mountain Dog Folder Name from n02086240-Shih-Tzu Changed to Shih Tzu Folder Name from n02093859-Kerry_blue_terrier Changed to Kerry Blue Terrier Folder Name from n02086079-Pekinese Changed to Pekinese Folder Name from n02107142-Doberman Changed to Doberman Folder Name from n02088364-beagle Changed to Beagle Folder Name from n02101388-Brittany_spaniel Changed to Brittany Spaniel Folder Name from n02093754-Border_terrier Changed to Border Terrier Folder Name from n02089078-black-and-tan_coonhound Changed to Black And Tan Coonhound Folder Name from n02099712-Labrador_retriever Changed to Labrador Retriever Folder Name from n02093991-Irish_terrier Changed to Irish Terrier Folder Name from n02090622-borzoi Changed to Borzoi Folder Name from n02091244-Ibizan_hound Changed to Ibizan Hound Folder Name from n02102177-Welsh_springer_spaniel Changed to Welsh Springer Spaniel . count=0 for fn in os.listdir(path): count+=1 print(fn) print(count) . Pembroke Staffordshire Bullterrier American Staffordshire Terrier Toy Poodle German Short Haired Pointer Dingo Walker Hound Golden Retriever Malinois English Setter Scotch Terrier Sealyham Terrier Rottweiler Afghan Hound Pomeranian Curly Coated Retriever Wire Haired Fox Terrier African Hunting Dog Norwegian Elkhound Australian Terrier Bull Mastiff Cairn Schipperke Clumber Irish Wolfhound Basenji Briard English Springer Chihuahua Malamute Saint Bernard Bernese Mountain Dog Leonberg Norfolk Terrier Affenpinscher Newfoundland Keeshond Bouvier Des Flandres Bedlington Terrier Miniature Pinscher Dhole Samoyed Italian Greyhound Japanese Spaniel West Highland White Terrier Redbone Chesapeake Bay Retriever German Shepherd Komondor Toy Terrier Soft Coated Wheaten Terrier Flat Coated Retriever Kuvasz Boston Bull Giant Schnauzer Blenheim Spaniel Brabancon Griffon Great Pyrenees Bloodhound Gordon Setter Boxer Standard Poodle Papillon Miniature Poodle Lakeland Terrier Lhasa Collie Scottish Deerhound Siberian Husky Basset Miniature Schnauzer Tibetan Mastiff Kelpie Border Collie Sussex Spaniel Pug Eskimo Dog Dandie Dinmont Saluki Groenendael Cardigan Irish Water Spaniel Mexican Hairless Weimaraner Shetland Sheepdog English Foxhound Cocker Spaniel Silky Terrier Bluetick Otterhound Entlebucher Norwich Terrier Chow Yorkshire Terrier Tibetan Terrier Vizsla Standard Schnauzer Airedale Whippet Appenzeller Old English Sheepdog Maltese Dog Rhodesian Ridgeback French Bulldog Irish Setter Great Dane Greater Swiss Mountain Dog Shih Tzu Kerry Blue Terrier Pekinese Doberman Beagle Brittany Spaniel Border Terrier Black And Tan Coonhound Labrador Retriever Irish Terrier Borzoi Ibizan Hound Welsh Springer Spaniel 120 . So we did what we intended to. Removing weird characters and keeping relevent ones. .",
            "url": "https://hiteshhedwig.github.io/hedwig-explains/python/filechange/datascience/2020/10/06/changing-folders-name.html",
            "relUrl": "/python/filechange/datascience/2020/10/06/changing-folders-name.html",
            "date": " • Oct 6, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hiteshhedwig.github.io/hedwig-explains/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is a blogging website where i share things both technical and spiritual ideas under the penname of hedwig. Connect with me : . Linkedin . Website . image .",
          "url": "https://hiteshhedwig.github.io/hedwig-explains/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hiteshhedwig.github.io/hedwig-explains/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}